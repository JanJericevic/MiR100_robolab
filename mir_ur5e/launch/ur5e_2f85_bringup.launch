<?xml version="1.0"?>
<launch>
  <arg name="debug" default="false" doc="Debug flag that will get passed on to ur_common.launch"/>
  <arg name="robot_ip" default="192.168.65.245" doc="IP address by which the robot can be reached."/>
  <arg name="reverse_ip" default="" doc="IP of the driver, if set to empty it will detect it automatically."/>
  <arg name="reverse_port" default="50001" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
  <arg name="script_sender_port" default="50002" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
  <arg name="trajectory_port" default="50003" doc="Port that will be opened by the driver to allow trajectory forwarding."/>
  <arg name="script_command_port" default="50004" doc="Port that will be opened by the driver to allow forwarding script commands to the robot."/>
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="controllers" default="joint_state_controller scaled_pos_joint_traj_controller speed_scaling_state_controller force_torque_sensor_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="pos_joint_traj_controller joint_group_vel_controller" doc="Controllers that are initally loaded, but not started."/>
  <arg name="controller_config_file" default="$(find ur5e_2f85_description)/config/ur5e_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <!-- <arg name="robot_description_file" default="$(find ur_description)/launch/load_ur5e.launch" doc="Robot description launch file."/> -->
  <arg name="robot_description_file" default="$(find ur5e_2f85_description)/launch/load_ur5e_2f85.launch" doc="Robot description launch file."/>
  <arg name="kinematics_config" default="$(find ur5e_2f85_description)/config/ur5e_kinematics_calib.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
  <arg name="use_tool_communication" default="true" doc="On e-Series robots tool communication can be enabled with this argument"/>
  <arg name="tool_voltage" default="24" doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_parity" default="0" doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_baud_rate" default="115200" doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_stop_bits" default="1" doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_rx_idle_chars" default="1.5" doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tx_idle_chars" default="3.5" doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_device_name" default="/tmp/ttyUR" doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tcp_port" default="54321" doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>
  <arg name="ur_hardware_interface_node_required" default="true" doc="Shut down ros environment if ur_hardware_interface-node dies."/>


  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">[joint_states, gripper_joint_states]</rosparam>
      <param name="rate" value="200." />
  </node>

  <include file="$(find mir_ur5e)/launch/ur_common.launch" pass_all_args="true" />

  <arg name="gripper_device" default="/tmp/ttyUR" />
  <node name="gripper_hw" pkg="robotiq_2f_gripper_control" type="Robotiq2FGripperRtuNode.py" args="$(arg gripper_device)">
    <remap from="Robotiq2FGripperRobotInput" to="~/input" />
    <remap from="Robotiq2FGripperRobotOutput" to="~/output" />
  </node>

  <!-- action server -->
  <include file="$(find robotiq_2f_gripper_action_server)/launch/robotiq_2f_gripper_action_server.launch">
      <!-- <arg name="min_gap" value="-0.015" />
      <arg name="max_gap" value="0.140" />  -->
      <arg name="gripper_name" value="gripper_hw" /> <!-- connect to hw node -->
  </include>


  <!-- add a node that translates the gripper data into a joint state -->
  <node name="gripper_joint_state_publisher" pkg="robotiq_2f_gripper_control" type="gripper_joint_state_publisher.py">
    <remap from="input" to="gripper_hw/input" />
    <remap from="joint_states" to="gripper_joint_states" />
  </node>
</launch>
